@using Mastonet.Entities
@inject NavigationManager NavigationManager

@if (Node.IsRoot && !string.IsNullOrEmpty(Status.InReplyToId)) {
	<a class="button mb-2" href="@(NavigationManager.BaseUri + Instance)/@(Status.InReplyToId)">
		Open containing Context
	</a>
}
<div class="media">
	@if (Node.Children.Count > 0) {
		<div class="media-left" style="width: 2px; align-self: normal; opacity: 0.25">
			<!-- Spacer -->
			<div class="has-background-grey-light" 
			     style="box-sizing: border-box; border-top: 1.5em solid blue; height: 100%">&nbsp;</div>
		</div>
	}
	<figure class="media-left is-hidden-mobile is-hidden-tablet-only">
		<p class="image is-48x48">
			<img src="@Status.Account.AvatarUrl" alt="">
		</p>
	</figure>
	<div class="media-content">
		<div class="content">
			<div>
				<strong style="white-space: nowrap">@Status.Account.DisplayName</strong>
				@if (!Node.IsRoot) {
					<a class="button is-small is-info mx-2" href="@(NavigationManager.BaseUri + Instance)/@(Status.Id)">
						Focus this Toot
					</a>
				}
				<br />
				<small style="white-space: nowrap">@@@Status.Account.AccountName</small>
			</div>
			@if(!string.IsNullOrEmpty(Status.SpoilerText)) {
				<CollapsableContent 
					ButtonClass="is-danger is-small is-outlined my-1" 
					CollapseLabel="@("CW: " + Status.SpoilerText)"
					IsHidden="true">
					<Content>
						@((MarkupString) Status.Content)
					</Content>
				</CollapsableContent>
			} else {
				@((MarkupString)Status.Content)
			}
		</div>
		
		<div class="level is-mobile">
			<span class="level-left">
				@if (Node.Children.Count > 0) {
					<button class="level-item button is-white has-text-primary" @onclick="ToggleReplyVisibility">
						@if (RepliesHidden) {
							<span>Show Replies</span>
						}
						else {
							<span>Hide Replies</span>
						}
					</button>
				} else {
					<button class="level-item button is-white has-text-grey" disabled>Hide Replies</button>
				}
				<span class="level-item">
					<i data-feather="corner-down-right" style="width: 1rem; margin-right: 0.2rem"></i>
					@Status.RepliesCount
				</span>
				<span class="level-item">
					<i data-feather="repeat" style="width: 1rem; margin-right: 0.2rem"></i>
					@Status.ReblogCount
				</span>
				<span class="level-item">
					<i data-feather="star" style="width: 1rem; margin-right: 0.2rem"></i>
					@Status.FavouritesCount
				</span>
			</span>
			<span class="level-right is-hidden-mobile">
				<small class="ml-2">@Status.CreatedAt</small>
			</span>
		</div>

		<div class="@RepliesCssClass">
			@if (Node.Children.Count > 0) {
				@foreach (var child in Node.Children) {
					<StatusTreeNodeComponent Node="@child" Instance="@Instance" />
				}
			}
		</div>
	</div>
</div>

@code {
	[Parameter]
	public string Instance { get; set; } = null!;
	[Parameter]
	public StatusTreeNode Node { get; set; } = null!;
	private Status Status => Node.Status;

	private bool RepliesHidden { get; set; }
	private string? RepliesCssClass => RepliesHidden ? "is-hidden" : null;

	private void ToggleReplyVisibility() {
		RepliesHidden = !RepliesHidden;
	}
}
